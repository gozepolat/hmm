{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "class GraphicalModel(object):\n",
    "    \"\"\" Abstract base class to build graphical models\n",
    "\n",
    "        # Attributes:\n",
    "\n",
    "        # Methods:\n",
    "        get_parents\n",
    "        ge\n",
    "    \"\"\"\n",
    "    def __init__(self):\n",
    "        pass\n",
    "\n",
    "\n",
    "class DynamicBayesian(GraphicalModel):\n",
    "    def __init__(self):\n",
    "        super(DynamicBayesian, self).__init__()\n",
    "\n",
    "\n",
    "# class KalmanFilter(DynamicBayesian):\n",
    "#    pass\n",
    "\n",
    "\n",
    "class HiddenMarkov(DynamicBayesian):\n",
    "    def __init__(self, initial_prob=None, transition_prob=None, emission_prop=None, end_state='E', log_prob=True, **kwargs):\n",
    "        super(HiddenMarkov, self).__init__(**kwargs)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def forward_backward(hmm, observed):\n",
    "    \"\"\" TODO compute p(X_k|Obs_1:n) (proportional to) ~=  p(X_k,Obs_1:n) = P(Obs_k+1:n|X_k)p(X_k, Obs_1:k)\n",
    "        for all X_k in the hidden state space\n",
    "    :param hmm:\n",
    "    :param observed:\n",
    "    :return:\n",
    "    \"\"\"\n",
    "    forward_message_pass(hmm,observed)*\n",
    "    pass\n",
    "\n",
    "\n",
    "def forward_message_pass(hmm, observed):\n",
    "    \"\"\" for all k in {1..n} compute p(X_k,Obs_1:k)\n",
    "\n",
    "    :param hmm:\n",
    "    :param observed:\n",
    "    :return:\n",
    "    \"\"\"\n",
    "    pass\n",
    "\n",
    "\n",
    "def backward_message_pass(hmm, observed):\n",
    "    \"\"\" for all k in {1..n} compute p(Obs_k+1:n|X_k)\n",
    "\n",
    "    :param hmm:\n",
    "    :param observed:\n",
    "    :return:\n",
    "    \"\"\"\n",
    "    pass"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def viterbi(obs, states, start_p, trans_p, emit_p):\n",
    "    V = [{}]\n",
    "    for i in states:\n",
    "        V[0][i] = start_p[i] * emit_p[i][obs[0]]\n",
    "    # Run Viterbi when t > 0\n",
    "    for t in range(1, len(obs)):\n",
    "        V.append({})\n",
    "        for y in states:\n",
    "            prob = max(V[t - 1][y0] * trans_p[y0][y] * emit_p[y][obs[t]] for y0 in states)\n",
    "            V[t][y] = prob\n",
    "    for i in dptable(V):\n",
    "        print i\n",
    "    opt = []\n",
    "    for j in V:\n",
    "        for x, y in j.items():\n",
    "            if j[x] == max(j.values()):\n",
    "                opt.append(x)\n",
    "    # The highest probability\n",
    "    h = max(V[-1].values())\n",
    "    # print h\n",
    "    print 'The steps of states are ' + ' '.join(opt) + ' with highest probability of %s' % h\n",
    "\n",
    "def dptable(V):\n",
    "    # Print a table of steps from dictionary\n",
    "    yield \" \".join((\"%10d\" % i) for i in range(len(V)))\n",
    "    for y in V[0]:\n",
    "        yield \"%.7s: \" % y + \" \".join(\"%.7s\" % (\"%f\" % v[y]) for v in V)\n",
    "\n",
    "states = ('St1', 'St2')\n",
    "observations = ('a', 'b', 'c')\n",
    "start_probability = {'St1': 0.526, 'St2': 0.474}\n",
    "transition_probability = {\n",
    "   'St1' : {'St1': 0.969, 'St2': 0.029},\n",
    "   'St2' : {'St1': 0.063, 'St2': 0.935}\n",
    "}\n",
    "emission_probability = {\n",
    "  'St1' : {'a': 0.005, 'b': 0.775, 'c': 0.220},\n",
    "   'St2' : {'a': 0.604, 'b': 0.277, 'c': 0.119}\n",
    "}\n",
    "observed_sequence = []\n",
    "with open(\"data/hmmdata.txt\", \"r\") as f:\n",
    "    header = next(f)\n",
    "    assert (header.strip().split() == [\"step\", \"state\", \"observation\"])\n",
    "    for line in f:\n",
    "        splitted = line.strip().split()\n",
    "        if len(splitted) > 2:\n",
    "            hidden_sequence.append(splitted[1])\n",
    "            observed_sequence.append(splitted[2])\n",
    "viterbi(observed_sequence, states, start_p, trans_p, emit_p)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    ""
   ]
  }
 ],
 "metadata": {},
 "nbformat": 4,
 "nbformat_minor": 0
}